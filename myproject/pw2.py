# -*- coding: utf-8 -*-
"""PW2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zeDi8LW0I3VnnEbEjK7yDUeIP5cg4pnA
"""

import numpy as np
import pandas as pd

def ganador(row):
  if row['Goles Local'] > row['Goles Visitante']:
    return row['Equipo Local']
  elif row['Goles Local'] < row['Goles Visitante']:
    return row['Equipo Visitante']
  else:
    return 'Empate'

df=pd.read_csv('Premier_League_20xx.csv')
df.drop(['promedio_asistencia_x'],axis=1,inplace=True)
df.drop(['promedio_asistencia_y'],axis=1,inplace=True)
df['Codigo'] = pd.factorize(df['Equipo Local'])[0] + 1  # Sumar 1 para que los códigos empiecen en 1
df['Ganador'] = df.apply(ganador, axis=1)
df.rename(columns={'Tiros Visitante Local':'Tiros Visitante Total'}, inplace=True)

df['fecha_formato']=pd.to_datetime(df['fecha_formato'])

df_local = df[['Fecha', 'Reloj', 'Estadio', 'Asistencia', 'Equipo Local','Equipo Visitante',
                'Goles Local', 'Goles Visitante', 'Posesión Local', 'Posesión Visitante', 'Tiros Locales Total', 'Tiros Visitante Total',
                'Tiros A Puerta Local', 'Tiros A Puerta Visitante', 'Tiros Fuera de Objetivo Local', 'Tiros Fuera de Objetivo Visitante',
                'Tiros Bloqueados Local', 'Tiros Bloqueados Visitante', 'Precisión en Pases Local', 'Precisión en Pases Visitante',
                'Oportunidades Local', 'Oportunidades Visitante' ,'Esquinas Local', 'Esquinas Visitante', 'Fuera de Juego Local', 'Fuera de Juego Visitante',
                'Porcentaje de Tackles Ganados Local', 'Porcentaje de Tackles Ganados Visitante',
                'Porcentaje de Duelo Aéreo Local', 'Porcentaje de Duelo Aéreo Visitante', 'Paradas Local', 'Paradas Visitante',
                'Faltas Cometidas Local', 'Faltas Cometidas Visitante','Amarillas Local', 'Amarillas Visitante', 'Rojas Local', 'Rojas Visitante', 'fecha_formato','Hora',
                'Año', 'Codigo', 'Ganador']].copy()

df_local['Codigo L_V'] = 1 #Codigo para saber si los datos son de juego Local o Visitante

df_visitante = df[['Fecha', 'Reloj', 'Estadio', 'Asistencia', 'Equipo Visitante', 'Equipo Local',
                    'Goles Visitante', 'Goles Local', 'Posesión Visitante', 'Posesión Local', 'Tiros Visitante Total', 'Tiros Locales Total',
                    'Tiros A Puerta Visitante', 'Tiros A Puerta Local' ,'Tiros Fuera de Objetivo Visitante', 'Tiros Fuera de Objetivo Local',
                    'Tiros Bloqueados Visitante', 'Tiros Bloqueados Local' ,'Precisión en Pases Visitante', 'Precisión en Pases Local',
                    'Oportunidades Visitante', 'Oportunidades Local' , 'Esquinas Visitante', 'Esquinas Local',
                    'Fuera de Juego Visitante', 'Fuera de Juego Local', 'Porcentaje de Tackles Ganados Visitante', 'Porcentaje de Tackles Ganados Local',
                    'Porcentaje de Duelo Aéreo Visitante', 'Porcentaje de Duelo Aéreo Local' ,'Paradas Visitante', 'Paradas Local',
                    'Faltas Cometidas Visitante', 'Faltas Cometidas Local' ,'Amarillas Visitante', 'Amarillas Local', 'Rojas Visitante', 'Rojas Local' , 'fecha_formato','Hora',
                    'Año', 'Codigo', 'Ganador']].copy()

df_visitante['Codigo L_V'] = 0 #Codigo para saber si los datos son de juego Local o Visitante

df_local = df_local.rename(columns={'Equipo Local': 'Equipo', 'Equipo Visitante': 'Equipo Rival', 'Goles Local': 'Goles',
                                     'Posesión Local': 'Posesión', 'Tiros Locales Total': 'Tiros Totales',
                                     'Tiros A Puerta Local': 'Tiros A Puerta',
                                     'Tiros Fuera de Objetivo Local': 'Tiros Fuera de Objetivo',
                                     'Tiros Bloqueados Local': 'Tiros Bloqueados',
                                     'Precisión en Pases Local': 'Precisión en Pases',
                                     'Oportunidades Local': 'Oportunidades',
                                     'Esquinas Local': 'Esquinas',
                                     'Fuera de Juego Local': 'Fuera de Juego',
                                     'Porcentaje de Tackles Ganados Local': 'Porcentaje de Tackles Ganados',
                                     'Porcentaje de Duelo Aéreo Local': 'Porcentaje de Duelo Aéreo',
                                     'Paradas Local': 'Paradas',
                                     'Faltas Cometidas Local': 'Faltas Cometidas',
                                     'Amarillas Local': 'Amarillas', 'Rojas Local': 'Rojas', 'Goles Visitante':'Goles Rival', 'Posesión Visitante':'Posesión Rival',
                                      'Tiros Visitante Total': 'Tiros Rival Total', 'Tiros A Puerta Visitante':'Tiros A Puerta Rival',
                                      'Tiros Fuera de Objetivo Visitante':'Tiros Fuera de Objetivo Rival', 'Tiros Bloqueados Visitante':'Tiros Bloqueados Rival',
                                     'Precisión en Pases Visitante':'Precisión en Pases Rival', 'Oportunidades Visitante':'Oportunidades Rival','Esquinas Visitante':'Esquinas Rival',
                                     'Fuera de Juego Visitante':'Fuera de Juego Rival', 'Porcentaje de Tackles Ganados Visitante':'Porcentaje de Tackles Ganados Rival',
                                       'Porcentaje de Duelo Aéreo Visitante':'Porcentaje de Duelo Aéreo Rival','Paradas Visitante':'Paradas Rival',
                                      'Faltas Cometidas Visitante':'Faltas Cometidas Rival', 'Amarillas Visitante':'Amarillas Rival','Rojas Visitante':'Rojas Rival'})

df_visitante = df_visitante.rename(columns={'Equipo Visitante': 'Equipo', 'Equipo Local': 'Equipo Rival','Goles Visitante': 'Goles',
                                             'Posesión Visitante': 'Posesión', 'Tiros Visitante Total': 'Tiros Totales',
                                             'Tiros A Puerta Visitante': 'Tiros A Puerta',
                                             'Tiros Fuera de Objetivo Visitante': 'Tiros Fuera de Objetivo',
                                             'Tiros Bloqueados Visitante': 'Tiros Bloqueados',
                                             'Precisión en Pases Visitante': 'Precisión en Pases',
                                             'Oportunidades Visitante': 'Oportunidades',
                                             'Esquinas Visitante': 'Esquinas',
                                             'Fuera de Juego Visitante': 'Fuera de Juego',
                                             'Porcentaje de Tackles Ganados Visitante': 'Porcentaje de Tackles Ganados',
                                             'Porcentaje de Duelo Aéreo Visitante': 'Porcentaje de Duelo Aéreo',
                                             'Paradas Visitante': 'Paradas',
                                             'Faltas Cometidas Visitante': 'Faltas Cometidas',
                                             'Amarillas Visitante': 'Amarillas', 'Rojas Visitante': 'Rojas','Goles Local':'Goles Rival', 'Posesión Local':'Posesión Rival',
                                              'Tiros Locales Total': 'Tiros Rival Total', 'Tiros A Puerta Local':'Tiros A Puerta Rival',
                                              'Tiros Fuera de Objetivo Local':'Tiros Fuera de Objetivo Rival', 'Tiros Bloqueados Local':'Tiros Bloqueados Rival',
                                              'Precisión en Pases Local':'Precisión en Pases Rival', 'Oportunidades Local':'Oportunidades Rival','Esquinas Local':'Esquinas Rival',
                                              'Fuera de Juego Local':'Fuera de Juego Rival', 'Porcentaje de Tackles Ganados Local':'Porcentaje de Tackles Ganados Rival',
                                              'Porcentaje de Duelo Aéreo Local':'Porcentaje de Duelo Aéreo Rival','Paradas Local':'Paradas Rival',
                                              'Faltas Cometidas Local':'Faltas Cometidas Rival', 'Amarillas Local':'Amarillas Rival','Rojas Local':'Rojas Rival'})

df_local.info()

df_visitante.info()

df_concatenado = pd.concat([df_local, df_visitante], ignore_index=True)
df_concatenado

df_codigos = df_concatenado[['Equipo', 'Codigo']] # Change 'Codigo' to 'Codigo Rival'
df_codigos = df_codigos.drop_duplicates(subset='Equipo')
df_codigos = df_codigos.rename(columns={'Equipo':'Equipo Rival'})

df_codigos = df_codigos.rename(columns={'Codigo':'Codigo Rival'})

df_concatenado = df_concatenado.merge(df_codigos, on='Equipo Rival', how='left')

df_concatenado['Hora']=df_concatenado['Hora'].str.replace(':.+','',regex=True).astype(int)

df_concatenado['codigo dia']=df_concatenado['fecha_formato'].dt.dayofweek

df_concatenado.head(5)

"""## MODELO"""

df_concatenado['codigo objetivo'] = (df_concatenado['Equipo'] == df_concatenado['Ganador']).astype(int)

df_concatenado.head(5)

from sklearn.ensemble import RandomForestClassifier

rf= RandomForestClassifier(n_estimators=100, min_samples_split=100 ,random_state=43)

train_set = df_concatenado[df_concatenado['Año'] < 2020]
test_set = df_concatenado[df_concatenado['Año'] >= 2020]

predecir=['Codigo L_V','Codigo Rival','Hora','codigo dia']

rf.fit(train_set[predecir],train_set['codigo objetivo'])

prediccion=rf.predict(test_set[predecir])

from sklearn.metrics import accuracy_score

exc=accuracy_score(test_set['codigo objetivo'],prediccion)
exc

combinacion=pd.DataFrame(dict(actual=test_set['codigo objetivo'],prediction=prediccion))

pd.crosstab(index=combinacion['actual'],columns=combinacion['prediction'])

from sklearn.metrics import precision_score

precision_score(test_set['codigo objetivo'],prediccion)

df_agrupado=df_concatenado.groupby('Equipo')
grupo=df_agrupado.get_group('Chelsea')
grupo



def rolling_averages(group, cols, new_cols):
    group = group.sort_values("fecha_formato")
    rolling_stats = group[cols].rolling(3, closed='left').mean()
    group[new_cols] = rolling_stats
    group = group.dropna(subset=new_cols)
    return group

df_concatenado.info()

cols=['Goles','Goles Rival','Posesión', 'Posesión Rival','Tiros Totales','Tiros Rival Total','Tiros A Puerta',
      'Tiros A Puerta Rival','Tiros Fuera de Objetivo', 'Tiros Fuera de Objetivo Rival','Tiros Bloqueados',
      'Tiros Bloqueados Rival','Precisión en Pases', 'Precisión en Pases Rival','Oportunidades', 'Oportunidades Rival','Esquinas',
      'Esquinas Rival','Fuera de Juego', 'Fuera de Juego Rival','Porcentaje de Tackles Ganados', 'Porcentaje de Tackles Ganados Rival',
      'Porcentaje de Duelo Aéreo', 'Porcentaje de Duelo Aéreo Rival','Paradas', 'Paradas Rival',
      'Faltas Cometidas', 'Faltas Cometidas Rival', 'Amarillas', 'Amarillas Rival',
      'Rojas', 'Rojas Rival', ]
new_cols=[f"{c}_rolling" for c in cols]

rolling_averages(grupo,cols,new_cols)

partidos_rolling=df_concatenado.groupby('Equipo').apply(lambda x: rolling_averages(x,cols,new_cols))

partidos_rolling

partidos_rolling=partidos_rolling.droplevel('Equipo')

partidos_rolling=partidos_rolling.reset_index()
partidos_rolling

partidos_rolling.info()

def hacer_predicciones(data,predecir):
  train_set = data[data['Año'] < 2022]
  test_set = data[data['Año'] >= 2022]
  rf.fit(train_set[predecir],train_set['codigo objetivo'])
  prediccion=rf.predict(test_set[predecir])
  combinacion=pd.DataFrame(dict(actual=test_set['codigo objetivo'],prediction=prediccion),index=test_set.index)
  precision_score=accuracy_score(test_set['codigo objetivo'],prediccion)
  return  combinacion, precision_score

combinacion,precision_score=hacer_predicciones(partidos_rolling, predecir + new_cols)

predecir

precision_score

combinacion

combinacion = combinacion.merge(partidos_rolling[['Fecha','Equipo','Equipo Rival','Goles','Goles Rival','Ganador','codigo objetivo']], left_index=True, right_index=True)

combinacion

filtro = df_concatenado[df_concatenado['Fecha'] == 'Sunday 30th December 2018.']
filtro

fusion = combinacion.merge(combinacion, left_on=["Fecha", "Equipo"], right_on=["Fecha", "Equipo Rival"])
fusion

fusion[(fusion["prediction_x"] == 1) & (fusion["prediction_y"] ==0)]["actual_x"].value_counts()

prec=267/400
print(prec)

"""# Modelo 2"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

X = df_concatenado[['Goles','Tiros A Puerta', 'Oportunidades', 'Amarillas', 'Rojas', 'Posesión', 'Paradas']]
y = df_concatenado['codigo objetivo']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=77)

x_testeado=X_test

y_testeado=y_test

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train

model = LogisticRegression()
model.fit(X_train, y_train)

X_train_df = pd.DataFrame(X_train, columns=['Goles', 'Tiros A Puerta', 'Oportunidades', 'Amarillas', 'Rojas', 'Posesión', 'Paradas'])
y_train_series = pd.Series(y_train)

# Mostrar las primeras filas
print("Muestras de X_train:")
X_train_df

print("\nMuestras de y_train:")
y_train_series

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Matriz de confusión:\n", confusion_matrix(y_test, y_pred))

"""Verdadera Positiva (TP): Casos en los que el modelo predijo correctamente la clase positiva.
Verdadera Negativa (TN): Casos en los que el modelo predijo correctamente la clase negativa.
Falsa Positiva (FP): Casos en los que el modelo predijo la clase positiva, pero la verdadera clase era negativa (también conocido como error tipo I).
Falsa Negativa (FN): Casos en los que el modelo predijo la clase negativa, pero la verdadera clase era positiva (error tipo II).
"""

#  Predicción Positiva       |      Predicción Negativa
#Verdadera Positiva (TP)     |     Verdadera Negativa (TN)
#Falsa Positiva (FP)         |     Falsa Negativa (FN)

from typing import Container
results_df = pd.DataFrame({
    'Predicciones': y_pred,
    'Target Real': y_test
})



results_df['Acierto'] = results_df['Predicciones'] == results_df['Target Real']

contar = results_df['Acierto'].sum()

contar

results_df

equipos = df_concatenado[['Equipo', 'Equipo Rival', 'Goles', 'Goles Rival', 'codigo objetivo']]

cucu_df = pd.merge(equipos, results_df, left_index=True, right_index=True)

cucu_df

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)